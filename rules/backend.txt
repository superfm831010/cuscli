/review/add_rule 应用开发架构使用:backend:项目父依赖应为cacp-spring-boot-parent或基于该依赖的自定义项目
/review/add_rule 应用开发架构使用:backend:项目核心依赖为cacp-service-spring-boot-starter或cacp-job-spring-boot-starter两者之一
/review/add_rule 应用开发架构使用:backend:项目如果使用数据源，则必须依赖cacp-datasource-spring-boot-starter
/review/add_rule 应用开发架构使用:backend:项目包/目录结构符合脚手架生成项目的基本结构，包路径匹配cn.customs.*，对应的功能类应该放在指定目录下：配置（config）、常量（constant）、调用服务（proxy）、接口（controller）、业务逻辑（service）、数据库Mapper接口（dao）、实体（pojo）、工具类（util）
/review/add_rule 应用开发架构使用:backend:项目命名应用按照"应用编码-功能描述-service/job"规则，且spring.application.name跟项目名保持一致
/review/add_rule 代码结构:backend:代码中不应存在复杂的if-else和for循环嵌套（嵌套层数大于3、语句块逻辑除注释外大于20行）
/review/add_rule 代码结构:backend:判断逻辑应简洁清晰（尽量使用工具类判断，组合判断逻辑运算符不要超过3个）
/review/add_rule 代码结构:backend:类和方法功能应单一，多个功能需要拆分（类按面向对象定义设计、方法保证职责单一）
/review/add_rule 代码结构:backend:代码保持统一格式化，方法行数过多应简化或拆分（行数应控制在30行以内）
/review/add_rule 代码结构:backend:重复或类似代码，要抽出独立的方法或类（两处相同即为重复）
/review/add_rule 代码结构:backend:同一个接口功能不应太多，具体逻辑应该由具体类的具体方法实现（接口指对外提供的api接口，逻辑应尽量简单，业务逻辑下放到具体类的具体方法）
/review/add_rule 代码结构:backend:尽量避免switch使用，可使用多态代替switch，如使用switch则必须包含default
/review/add_rule 代码结构:backend:消除“魔数”，多处相同字符串或数字，应抽取为常量
/review/add_rule 代码结构:backend:代码中禁止使用Date类，应使用LocalDateTime替换
/review/add_rule 代码结构:backend:严禁使用循环方式操作数据库，必要时使用批量操作
/review/add_rule 代码结构:backend:避免在同一个service中，一个方法内部调用另一个带事务的方法（事务不生效）
/review/add_rule 代码结构:backend:类名、变量名、方法名等命名要规范（驼峰命名，见名知意）
/review/add_rule 代码结构:backend:应准确编写注释内容，删除无用代码
/review/add_rule 代码结构:backend:避免一行代码过长（不要超过120）
/review/add_rule 代码结构:backend:应去掉多余的import引用
/review/add_rule 代码结构:backend:不使用hutool工具类包，建议使用common-lang3、guava工具集
/review/add_rule 代码结构:backend:字符串拼接，尤其是循环拼接，应使用StringBuilder
/review/add_rule 代码结构:backend:响应信息尽量避免包含前端代码，或使用ESAPI库进行输出编码以防止XSS攻击
/review/add_rule 异常处理:backend:异常捕获后需处理为自定义封装（BizException），使用统一错误标识（实现ExceptionCodeMessage的异常编码枚举类）
/review/add_rule 异常处理:backend:try-catch异常后禁止使用e.printStackTrace();方式输出且没有其他处理（防止异常日志丢失）
/review/add_rule 异常处理:backend:异常捕获后如需重新抛出自定义业务异常，则不必额外使用log.error记录，直接throw new BizException(...)即可；如不再抛出则应使用log.error记录
/review/add_rule 安全性:backend:避免空指针风险，方法尽量不返回null
/review/add_rule 安全性:backend:字符串比对应注意NPE问题，可使用ObjectUtils提供的比对方法如：ObjectUtils.equals(str1, str2)
/review/add_rule 安全性:backend:应使用SecureRandom替代Random生成安全敏感的随机数，Random仅可用于非安全场景如内部分组
/review/add_rule 安全性:backend:对用户提供数据，敏感信息需加密或脱敏展示（如：手机号、身份证、银行卡号等）
/review/add_rule 安全性:backend:Redis缓存数据需配置有效期
/review/add_rule 安全性:backend:禁止缓存MB级以上数据
/review/add_rule 安全性:backend:避免缓存key重复，应带有独有的命名标识，如"业务模块:对象类型:ID"
/review/add_rule 其他:backend:状态（如：未审批，已审批）不建议使用数字，建议使用有意义的字符串
/review/add_rule 其他:backend:审计日志记录和调用时机要合理，如用户登录、敏感操作、数据修改等关键节点
/review/add_rule 其他:backend:git上传避免非代码相关内容，使用.gitignore
/review/add_rule 日志输出:backend:注意日志输出级别，区分INFO\WARN\DEBUG\ERROR
/review/add_rule 日志输出:backend:日志输出信息要准确、精简，方便定位，避免输出过多无用内容
/review/add_rule 日志输出:backend:复杂业务逻辑处理要为排查问题补充debug级别日志
/review/add_rule 接口定义:backend:url路径名称要求：全小写、不使用驼峰、使用"-"连接（/get-user）
/review/add_rule 接口定义:backend:Controller接口中推荐使用GET和POST请求方式，尽量不用PUT和DELETE
/review/add_rule 接口定义:backend:接口请求参数只定义业务所需的字段，避免冗余参数
/review/add_rule 接口定义:backend:删除或其它对数据库数据有操作的接口，应使用Post请求，执行语句带rec_version（版本号）条件
/review/add_rule 数据库:backend:数据库表要包含以下三个字段：REC_VERSION（版本号）、REC_CREATE_TIME（创建时间）、REC_LAST_UPDATE_TIME（最后更新时间）
/review/add_rule 数据库:backend:service中多次操作数据库要开启事务，且考虑抛出异常时数据库回滚问题。
/review/add_rule 数据库:backend:数据库表设计时主键列名要有业务含义（如"USER_ID"）
/review/add_rule 数据库:backend:mybatis的mapper.xml中编写sql注意，没有条件时不要留下where关键字
/review/add_rule 配置_工具:backend:读取配置文件中的配置，尽量使用@ConfigurationProperties注解类接收，减少@Value注解的使用
/review/add_rule 配置_工具:backend:在处理stream流时要有流关闭逻辑，推荐使用try-with-resources方式，或添加@Cleanup注解
/review/add_rule 配置_工具:backend:推荐使用构造器注入替换@Resource、@Autowired注入，可以使用@RequiredArgsConstructor注解简化（构造器注入指定bean时，需要手动添加构造方式并使用@Qualifier注解指定Bean）

/review/add_rule 海关定制:backend:项目父依赖应为cacp-spring-boot-parent或基于该依赖的自定义项目

/review/add_rule 海关定制:backend:项目目录命名应用按照"{string}-{string}-service/job"规则，且spring.application.name跟项目名保持一致

/review/add_rule 海关定制:backend:代码中不应存在复杂的if-else和for循环嵌套（嵌套层数大于3）

/review/add_rule 海关定制:backend:代码中禁止使用Date类，应使用LocalDateTime替换

/review/add_rule 海关定制:backend:字符串拼接，尤其是循环拼接，应使用StringBuilder或StringBuffer

/review/add_rule 海关定制:backend:异常捕获后如需重新抛出自定义业务异常，则不必额外使用log.error记录，直接throw new BizException(...)即可；如不再抛出则应使用log.error记录

/review/add_rule 海关定制:backend:url路径名称要求：全小写、不使用驼峰、使用"-"连接（/get-user）

/review/add_rule 海关定制:backend:数据库表要包含以下三个字段：REC_VERSION（版本号）、REC_CREATE_TIME（创建时间）、REC_LAST_UPDATE_TIME（最后更新时间）

/review/add_rule 海关定制:backend:空指针调用。调用对象如果可能为空时，应在使用前进行判断。

/review/add_rule 海关定制:backend:空异常。变量初始值为空或曾判空，在其他逻辑分支使用变量时均应进行判空。

/review/add_rule 海关定制:backend:继承了Closeable接口的对象，在使用后必须调用close()方法关闭对象。

/review/add_rule 海关定制:backend:使用String.split方法返回的结果必须进行长度判断。

/review/add_rule 海关定制:backend:在单实例类中禁止使用私有变量。

/review/add_rule 海关定制:backend:跳转语句不应出现在 "finally" 中